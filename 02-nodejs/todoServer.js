/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const fs = require("fs");
const { timeLog } = require("console");

const app = express();
const filePath = path.join(__dirname, "todos.txt");
app.use(bodyParser.json());

function generateRandomNumber() {
  const min = 10000;
  const max = 99999;
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function readJsonArraySync(filePath) {
  data = fs.readFileSync(filePath, "utf-8");
  jsonArray = data ? JSON.parse(data) : [];
  return jsonArray;
}

function sendStatus(found, res) {
  if (found) {
    return res.status(200).send("OK");
  } else {
    return res.status(404).send("Not Found");
  }
}

app.get("/todos", (req, res) => {
  return res.status(200).send(readJsonArraySync(filePath));
});

app.get("/todos/:id", (req, res) => {
  const jsonArray = readJsonArraySync(filePath);
  const id = parseInt(req.params.id);
  let found = false;
  let index = 0;

  for (let i = 0; i < jsonArray.length; i++) {
    if (id === jsonArray[i].id) {
      found = true;
      index = i;
    }
    break;
  }

  if (found) {
    return res.status(200).send(jsonArray[index]);
  } else {
    return res.status(404).send("Not Found");
  }
});

app.post("/todos", (req, res) => {
  const todo = {
    title: req.body.title,
    description: req.body.description,
    id: generateRandomNumber(),
  };

  const jsonArray = readJsonArraySync(filePath);
  jsonArray.push(todo);

  fs.writeFileSync(filePath, JSON.stringify(jsonArray));
  return res.status(201).send({ id: todo.id });
});

app.put("/todos/:id", (req, res) => {
  const jsonArray = readJsonArraySync(filePath);
  const id = parseInt(req.params.id);
  let found = false;

  for (let i = 0; i < jsonArray.length; i++) {
    if (jsonArray[i].id === id) {
      found = true;
      jsonArray[i].title = req.body.title;
      jsonArray[i].description = req.body.description;

      fs.writeFileSync(filePath, JSON.stringify(jsonArray));
      break;
    }
  }
  sendStatus(found, res);
});

app.delete("/todos/:id", (req, res) => {
  const jsonArray = readJsonArraySync(filePath);
  const id = parseInt(req.params.id);
  let found = false;

  for (let i = 0; i < jsonArray.length; i++) {
    if (jsonArray[i].id === id) {
      found = true;
      jsonArray.splice(i, 1);
      fs.writeFileSync(filePath, JSON.stringify(jsonArray));
      break;
    }
  }
  sendStatus(found, res);
});

app.listen(3000, () => {
  console.log("listening on port 3000");
});

module.exports = app;
